{"version":3,"sources":["hooks/useFetch.jsx","utils/links.jsx","utils/token.jsx","components/ErrorMessage.jsx","components/CheckElement.jsx","components/drawers.jsx","utils/formatDate.jsx","utils/labelColor.jsx","components/IssueDrawer.jsx","utils/issueStatus.jsx","utils/LoadingElement.jsx","components/ProjectView.jsx","views/Profile.jsx","views/login.jsx","routes/routes.jsx","views/NotfoundPage.jsx","routes/AppRouter.jsx","App.js","reportWebVitals.js","index.js"],"names":["useFetch","url","options","deps","useState","response","setResponse","error","setError","isLoading","setIsLoading","trigger","setTrigger","useEffect","a","fetch","res","json","fetchData","console","log","backendLink","endpoint","key","getToken","localStorage","getItem","ErrorMessage","message","my","status","borderRadius","CheckElement","list","setList","value","props","includes","isChecked","setIsChecked","copyList","push","filter","v","onClick","event","preventDefault","backgroundColor","textColor","width","height","children","DrawerAddProject","useDisclosure","isOpen","onOpen","onClose","isFetching","firstField","React","useRef","username","useParams","name","setName","colorScheme","placement","initialFocusRef","borderBottomWidth","spacing","htmlFor","ref","id","placeholder","onChange","currentTarget","borderTopWidth","variant","mr","method","body","JSON","stringify","users","headers","then","DrawerAddIssue","projectId","title","setTitle","desc","setDesc","labelId","setLabelId","assignees","setAssignees","labels","data","handleClose","success","toast","createStandaloneToast","duration","isClosable","onSubmit","e","length","isRequired","onBlur","target","resize","size","map","label","isInline","justifyContent","divider","borderColor","user","py","px","src","avatar_url","fontSize","first_name","last_name","type","form","loadingText","formatDate","d","date","Date","Intl","DateTimeFormat","month","day","format","labelColor","bug","enhancement","IssueDrawer","issue","setIssue","mt","project_name","author","created_at","description","assignee","issueStatus","color","icon","InfoOutlineIcon","CheckIcon","LinkIcon","LoadingElement","isIndeterminate","ProjectView","projects","project","query","setQuery","errors","issues","results","p","borderWidth","issueCard","aria-label","isDisabled","previous","ArrowBack","next","ArrowForward","lastUpdate","updated_at","hasArrow","as","ProfileView","params","h","direction","base","md","lg","maxW","minW","w","display","userData","align","UserCard","firstName","lastName","avatarUrl","ml","fontWeight","Container","Projects","index","mb","to","LoginArea","minHeight","maxWidth","textAlign","boxShadow","LoginForm","email","setEmail","password","setPassword","fetchStatus","SignIn","token","setItem","onKeyUp","keyCode","routes","login","path","component","profile","profileTab","notFound","AppRouter","flexDirection","minH","flexGrow","exact","strict","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c0a0acf.chunk.js","sourcesContent":["import {useState, useEffect} from 'react'\r\n\r\nexport function useFetch(url, options, deps) {\r\n    const  [response, setResponse] = useState(null)\r\n    const  [error, setError] = useState(null)\r\n    const  [isLoading, setIsLoading] = useState(false)\r\n    const [trigger, setTrigger] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setTrigger(false)\r\n\r\n        const fetchData = async () => {\r\n            if(!response)  setIsLoading(true)\r\n            try {\r\n                const res = await fetch(url, options)\r\n                const json = await res.json()\r\n                setResponse(json)\r\n                setIsLoading(false)\r\n            } catch (error) {\r\n                setError(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        console.log('fetched')\r\n    }, [trigger])\r\n    return { response, error, isLoading, setTrigger }\r\n}","export function backendLink(endpoint='', key=null) {\r\n    return `http://localhost:8000/${endpoint}${key ? '/'+key : ''}`\r\n    // return \"http://localhost:8000/\" + endpoint + key ? \"/\" : '' + key\r\n}","export const getToken = () => {\r\n    return localStorage.getItem('issue_tracker_token')\r\n}\r\n\r\nexport const setToken = (token) => {\r\n    return localStorage.setItem('issue_tracker_token', token)\r\n}","import React from 'react'\r\nimport { Box, Alert, AlertDescription, AlertIcon} from \"@chakra-ui/react\";\r\n\r\nexport default function ErrorMessage({message}){\r\n  return(\r\n    <Box my={4}>\r\n      <Alert status={'error'} borderRadius={10}>\r\n        <AlertIcon/>\r\n        <AlertDescription>{message}</AlertDescription>\r\n      </Alert>\r\n    </Box>\r\n  )\r\n}","import { Box } from \"@chakra-ui/react\";\r\nimport {useState, useEffect} from \"react\";\r\n\r\nexport function CheckElement({list, setList, value, ...props}){\r\n  const [isChecked, setIsChecked] = useState(list.includes(value))\r\n\r\n  useEffect(()=>{\r\n    if(isChecked){\r\n      let copyList = list\r\n      copyList.push(value)\r\n      setList(copyList)\r\n    }\r\n    if(!isChecked){\r\n      const copyList = list.filter((v) => v !== value)\r\n      setList(copyList)\r\n    }\r\n  },[isChecked])\r\n\r\n  const handleClick = (event) => {\r\n    event.preventDefault()\r\n    setIsChecked(!isChecked)\r\n  }\r\n\r\n  return(\r\n    <Box\r\n        onClick={handleClick}\r\n         borderRadius={0}\r\n         backgroundColor={isChecked ? 'blue.500' : ''}\r\n         textColor={isChecked ? 'white' : ''}\r\n         width={'full'}\r\n         height={'max-content'}\r\n      {...props}>\r\n      {props.children}\r\n    </Box>\r\n  )\r\n}","import React from 'react'\r\nimport {\r\n  Drawer, DrawerBody, DrawerFooter,\r\n  DrawerHeader, DrawerOverlay, DrawerContent, DrawerCloseButton,\r\n  Button, useDisclosure, Input,\r\n  Box, FormLabel, Stack,\r\n  Select, Textarea, FormControl,\r\n  VStack, Avatar, Text, Heading, StackDivider, createStandaloneToast,\r\n} from \"@chakra-ui/react\"\r\nimport { useState } from \"react\"\r\nimport { useParams } from 'react-router'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useFetch } from '../hooks/useFetch'\r\nimport { backendLink } from '../utils/links'\r\nimport { getToken } from '../utils/token'\r\nimport ErrorMessage from \"./ErrorMessage\"\r\nimport { CheckElement } from \"./CheckElement\"\r\nimport {CheckCircleIcon} from \"@chakra-ui/icons\";\r\n\r\nexport function DrawerAddProject(){\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const firstField = React.useRef()\r\n  const username = useParams()\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const PublishProject = () => {\r\n\r\n    fetch(backendLink('projects'), {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        name: name,\r\n        users: [username],\r\n        status: true,\r\n      }),\r\n      headers: {\r\n        'Authorization': 'Token ' + getToken(),\r\n        'Content-Type': 'application/json',\r\n      }\r\n    }).then(response => {\r\n      response.status === 201 ? onClose() : console.log('error')\r\n    })\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        colorScheme=\"green\"\r\n        onClick={onOpen}\r\n      >\r\n        Nuevo Proyecto\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        initialFocusRef={firstField}\r\n        onClose={onClose}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader borderBottomWidth=\"1px\">\r\n              Crear nuevo proyecto\r\n            </DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              <Stack spacing=\"24px\">\r\n                <Box>\r\n                  <FormLabel htmlFor=\"name\">Nombre del proyecto</FormLabel>\r\n                  <Input\r\n                    ref={firstField}\r\n                    id=\"name\"\r\n                    placeholder=\"Introduce el nombre del proyecto\"\r\n                    onChange={event => setName(event.currentTarget.value)}\r\n                  />\r\n                </Box>\r\n              </Stack>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter borderTopWidth=\"1px\">\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Cancelar\r\n              </Button>\r\n              <Button\r\n                colorScheme='teal'\r\n                onClick={PublishProject}\r\n                isLoading={isFetching}\r\n              >Crear</Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport function DrawerAddIssue({projectId, trigger, ...props}){\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n  const firstField = React.useRef()\r\n\r\n  const [title, setTitle] = useState('')\r\n  const [desc, setDesc] = useState('')\r\n  const [labelId, setLabelId] = useState(null)\r\n  const [assignees, setAssignees] = useState([])\r\n\r\n  const [error, setError] = useState('')\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const res = useFetch(backendLink('newissuedata', '1'), {\r\n    method:'GET',\r\n    headers: {\r\n      'Authorization': 'Token ' + getToken()\r\n    }\r\n  })\r\n\r\n  let labels = res.isLoading || !res.response ? [] : res.response.data.labels\r\n  let users = res.isLoading || !res.response ? [] : res.response.data.users\r\n\r\n  function handleClose(success=false){\r\n    onClose()\r\n    setError('')\r\n    setIsLoading(false)\r\n    setAssignees([])\r\n    setLabelId(null)\r\n\r\n    if(success===true){\r\n      trigger(true)\r\n\r\n      const toast = createStandaloneToast()\r\n      toast({\r\n        title: 'Issue creado.',\r\n        status:'success',\r\n        duration:6000,\r\n        isClosable:true,\r\n      })\r\n    }\r\n  }\r\n\r\n  function handleSubmit(e){\r\n    e.preventDefault()\r\n    setIsLoading(true)\r\n    setError('')\r\n\r\n    if (title.length > 50){\r\n      setError('The title characters must be less than 50.')\r\n      return 0\r\n    }\r\n\r\n    fetch(backendLink('issues'), {\r\n      method:'POST',\r\n      body:JSON.stringify({\r\n        'title':title,\r\n        'label_id':labelId ? labelId : null,\r\n        'description':desc,\r\n        'project':projectId,\r\n        'assignees': assignees\r\n      }),\r\n      headers: {\r\n        'Authorization': 'Token ' + getToken(),\r\n        'Content-Type': 'application/json',\r\n      }\r\n    }).then(response=>{\r\n      response.status === 201 ? handleClose(true) : setError('Error al crear el issue. Trata de nuevo.')\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        colorScheme=\"green\"\r\n        onClick={onOpen}\r\n        {...props}\r\n      >\r\n        Nuevo Issue\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        initialFocusRef={firstField}\r\n        onClose={handleClose}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader borderBottomWidth=\"1px\">\r\n              Crear nuevo issue\r\n            </DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              <form id={'issue-form'}\r\n                    onSubmit={handleSubmit}\r\n              >\r\n                {error && <ErrorMessage message={error}/>}\r\n\r\n              <Stack spacing={'20px'}>\r\n\r\n                <FormControl id={'title'} isRequired>\r\n                  <FormLabel>Título del issue</FormLabel>\r\n                  <Input ref={firstField}\r\n                         onBlur={event => setTitle(event.target.value)}\r\n                         placeholder={'Introduce el título del issue'}\r\n                  />\r\n                </FormControl>\r\n\r\n                <FormControl isRequired>\r\n                  <FormLabel htmlFor=\"desc\">Descripción</FormLabel>\r\n                  <Textarea placeholder={'Escribe la descripción del issue'}\r\n                            onBlur={event => setDesc(event.target.value)}\r\n                            resize={'none'}\r\n                            size={'sm'}\r\n                            height={'20vh'}\r\n                            id={'desc'} />\r\n                </FormControl>\r\n\r\n                <FormControl>\r\n                  <FormLabel>Etiqueta</FormLabel>\r\n                  <Select onChange={event=>setLabelId(event.target.value)}\r\n                          placeholder={'Selecciona una etiqueta'}>\r\n                    {labels.map(label => {\r\n                      return(\r\n                        <option key={label.id} value={label.id}>\r\n                            {label.name}\r\n                        </option>\r\n                      )\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n\r\n                <FormControl>\r\n                  <Stack isInline justifyContent={'space-between'}>\r\n                    <FormLabel>Asignar usuarios</FormLabel>\r\n                  </Stack>\r\n                  <VStack spacing={0} divider={<StackDivider borderColor=\"gray.200\" />}>\r\n                    {users.map(user=>{\r\n                      return(\r\n                        <CheckElement key={user.id}\r\n                                      value={user.id}\r\n                                      list={assignees}\r\n                                      setList={setAssignees}\r\n                                      py={.5}\r\n                                      px={5}\r\n                        >\r\n                          <Stack isInline>\r\n                            <Avatar size={'xs'} src={user.avatar_url}/>\r\n                            <Heading fontSize={'sm'}>{user.username}</Heading>\r\n                            <Text fontSize={'xs'}>{user.first_name} {user.last_name}</Text>\r\n                         </Stack>\r\n                        </CheckElement>\r\n                      )\r\n                    })}\r\n                  </VStack>\r\n                </FormControl>\r\n\r\n\r\n              </Stack>\r\n              </form>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter borderTopWidth=\"1px\">\r\n              <Button variant=\"outline\" mr={3} onClick={handleClose}>\r\n                Cancelar\r\n              </Button>\r\n              <Button\r\n                type={'submit'}\r\n                form={'issue-form'}\r\n                isLoading={isLoading}\r\n                loadingText={'Fetching...'}\r\n                // onClick={Test}\r\n                colorScheme=\"blue\">Crear</Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  )\r\n}","export function formatDate(d) {\r\n    const date = new Date(d);\r\n    const formattedDate = Intl.DateTimeFormat('es-MX',{\r\n        // year: 'numeric',\r\n        month: 'short',\r\n        day: '2-digit' }).format(date);\r\n\r\n    return formattedDate\r\n}\r\n\r\n// Output in M d, Y format","export const labelColor = {\r\n  bug:'red',\r\n  enhancement: 'teal',\r\n}\r\n\r\n","import {\r\n  Avatar, createStandaloneToast,\r\n  Drawer, DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  Heading,\r\n  Link, Stack, StackDivider, Tag, Text,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\"\r\nimport {useState} from \"react\"\r\nimport {getToken} from \"../utils/token\";\r\nimport {formatDate} from \"../utils/formatDate\";\r\nimport {labelColor} from \"../utils/labelColor\";\r\n\r\nexport function IssueDrawer({trigger, ...props}){\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n  const [ issue, setIssue ] = useState({})\r\n\r\n  const handleOpen = () => {\r\n    onOpen()\r\n\r\n    fetch(props.issue.url, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': 'Token ' + getToken(),\r\n      }\r\n    }).then(response => {\r\n      response.json().then(data=>{\r\n        setIssue(data.data ? data.data : {})\r\n      })\r\n\r\n      if (response.status === 404){\r\n        onClose()\r\n        const toast = createStandaloneToast()\r\n        toast({\r\n        title: 'El issue no existe.',\r\n        status:'error',\r\n        duration:6000,\r\n        isClosable:true,\r\n          })\r\n        trigger(true)\r\n      }\r\n    })\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <Heading fontSize={'sm'}>\r\n        <Link onClick={handleOpen}>{props.issue.title}</Link>\r\n      </Heading>\r\n\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton/>\r\n            <DrawerHeader mt={5}>\r\n              <Heading size={'md'}>{issue.title ? issue.title : 'Titulo del issue'}</Heading>\r\n              <Text fontSize={'xs'} textColor={'gray.500'} mt={1}>Abierto en {issue.project_name}</Text>\r\n            </DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              <Stack divider={<StackDivider borderColor=\"gray.300\" />}>\r\n                <Stack>\r\n                  <Stack isInline>\r\n                    <Avatar size={'sm'} src={issue.author ? issue.author.avatar_url : ''}/>\r\n                    <Stack>\r\n                      <Heading size={'xs'}>{issue.author ? issue.author.username : 'Autor del issue'}</Heading>\r\n                      <Text fontSize={'xs'}>{issue.created_at ? formatDate(issue.created_at) : ''}</Text>\r\n                    </Stack>\r\n                  </Stack>\r\n                  <Text fontSize={'xs'}>\r\n                    {issue.description}\r\n                  </Text>\r\n                </Stack>\r\n\r\n                <Stack>\r\n                  <Text fontSize={'xs'} textColor={'gray.500'}>Usuarios asignados</Text>\r\n\r\n                  {issue.assignees ? issue.assignees.map(assignee => {\r\n                    return (\r\n                      <Stack isInline key={assignee.id}>\r\n                        <Avatar size={'xs'} src={assignee.avatar_url}/>\r\n                        <Text fontSize={'xs'}>{assignee.username}</Text>\r\n                      </Stack>\r\n                    )\r\n                  }) : ''}\r\n\r\n                </Stack>\r\n\r\n                <Stack>\r\n                  <Text fontSize={'xs'} textColor={'gray.500'}>Etiqueta</Text>{\r\n                    issue.label ?\r\n                      <Tag colorScheme={labelColor[issue.label.name]} size={'sm'}>{issue.label.name}</Tag>\r\n                      : ''}\r\n                </Stack>\r\n              </Stack>\r\n            </DrawerBody>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  )\r\n}","import { LinkIcon, CheckIcon, InfoOutlineIcon }\r\n  from '@chakra-ui/icons'\r\n\r\nexport const issueStatus = [\r\n  {\r\n    name: 'Open',\r\n    color: 'green',\r\n    icon: InfoOutlineIcon\r\n  },\r\n  {\r\n    name: 'Closed',\r\n    color: 'red',\r\n    icon: CheckIcon\r\n  },\r\n  {\r\n    name:'Merged',\r\n    color:'purple',\r\n    icon: LinkIcon\r\n  }\r\n]\r\n\r\n// OPEN = 1, 'Open'\r\n// CLOSED = 2, 'Closed'\r\n// MERGED = 3, 'Merged'","import {Center, CircularProgress} from \"@chakra-ui/react\";\r\n\r\nexport function LoadingElement(){\r\n\r\n  return(\r\n    <Center height={'100vh'}>\r\n      <CircularProgress isIndeterminate color=\"blue.300\" />\r\n    </Center>\r\n  )\r\n}","import {\r\n  Box, Flex,\r\n  Heading, IconButton, Slide, Stack, StackDivider,\r\n  Tag, Text, Tooltip\r\n} from \"@chakra-ui/react\";\r\nimport { useParams } from 'react-router'\r\nimport {formatDate} from \"../utils/formatDate\";\r\nimport {IssueDrawer} from \"./IssueDrawer\";\r\nimport {labelColor} from \"../utils/labelColor\";\r\nimport {DrawerAddIssue} from \"./drawers\";\r\nimport {issueStatus} from \"../utils/issueStatus\";\r\nimport {ArrowBackIcon, ArrowForwardIcon, Icon} from \"@chakra-ui/icons\";\r\nimport {useFetch} from \"../hooks/useFetch\";\r\nimport {getToken} from \"../utils/token\";\r\nimport {LoadingElement} from \"../utils/LoadingElement\";\r\nimport {backendLink} from \"../utils/links\";\r\nimport {useState} from \"react\";\r\n\r\nexport function ProjectView({projects, ...props}){\r\n  const params = useParams()\r\n  const project = projects[params.project-1]\r\n  const [query, setQuery] = useState(backendLink(`issues/?page=${1}&project=${project.id}`))\r\n\r\n  const res = useFetch(query, {\r\n    method:'GET',\r\n    headers: {\r\n      'Authorization': 'Token ' + getToken()\r\n    }\r\n  }, [query])\r\n\r\n  if (res.isLoading || !res.response) return <LoadingElement/>\r\n  if (res.response.errors) return <Heading>{res.response.errors.error}</Heading>\r\n\r\n  const issues = res.response.results\r\n\r\n  function handlePrevious(){\r\n    setQuery(res.response.previous)\r\n    res.setTrigger(true)\r\n  }\r\n\r\n  function handleNext(){\r\n    setQuery(res.response.next)\r\n    res.setTrigger(true)\r\n  }\r\n  return(\r\n    <Box\r\n      width={'full'}\r\n      height={'full'}\r\n      {...props}\r\n    >\r\n      <Stack isInline p={3} justifyContent={'space-between'}>\r\n        <Heading>{project ? project.name : 'NoName'}</Heading>\r\n        <DrawerAddIssue  projectId={project ? project.id : ''} trigger={res.setTrigger}/>\r\n      </Stack>\r\n      <Box\r\n        borderWidth={1}\r\n        borderRadius={10}\r\n        p={5}\r\n      >\r\n        <Stack\r\n          divider={<StackDivider borderColor=\"gray.200\" />} >\r\n          {!res.isLoading ?\r\n            issues.map(issue=>issueCard(issue, res.setTrigger))\r\n            : <LoadingElement/>}\r\n        </Stack>\r\n      </Box>\r\n      <Stack isInline mt={'10px'}>\r\n        <IconButton aria-label={'Previous page'}\r\n                    isDisabled={res.response.previous ? false : true }\r\n                    colorScheme={'gray'}\r\n                    onClick={handlePrevious}\r\n                    icon={<ArrowBackIcon/>} />\r\n\r\n        <IconButton aria-label={'Next page'}\r\n                    isDisabled={res.response.next ? false : true}\r\n                    colorScheme={'gray'}\r\n                    onClick={handleNext}\r\n                    icon={<ArrowForwardIcon/>} />\r\n\r\n      </Stack>\r\n    </Box>\r\n  )\r\n}\r\n\r\nconst issueCard = (issue, trigger) => {\r\n  const lastUpdate = formatDate(issue.updated_at)\r\n  const status = issueStatus[issue.status-1]\r\n\r\n  return(\r\n    <Flex\r\n      key={issue.id}\r\n      height={'auto'}\r\n      width={'full'}\r\n    >\r\n      <Stack isInline>\r\n        <Stack>\r\n          <Stack isInline>\r\n            <Tooltip hasArrow label={status.name} placement={'left'}>\r\n                <Icon as={status.icon} color={status.color}/>\r\n            </Tooltip>\r\n              {issue.label ? issue.label.name : ''}\r\n            <Stack>\r\n              <IssueDrawer issue={issue} trigger={trigger}/>\r\n              <Tag\r\n                colorScheme={issue.label ? labelColor[issue.label.name] : ''}\r\n                borderRadius={20}\r\n                width={'max-content'}\r\n              >{issue.label ? issue.label.name : ''}</Tag>\r\n            </Stack>\r\n          </Stack>\r\n          <Text fontSize={'xs'} textColor={'gray.500'}>Ultima actualización {lastUpdate}</Text>\r\n        </Stack>\r\n      </Stack>\r\n    </Flex>\r\n  )\r\n}","import {\r\n  Flex, Box, Text, Heading,\r\n  Stack, Button,\r\n  Avatar, Tabs, TabList, Tab, TabPanels,\r\n  TabPanel, Tag, StackDivider,\r\n} from '@chakra-ui/react'\r\nimport { useParams } from 'react-router'\r\nimport { Link } from 'react-router-dom'\r\nimport { DrawerAddProject } from '../components/drawers'\r\nimport { useFetch } from '../hooks/useFetch'\r\nimport { formatDate } from '../utils/formatDate'\r\nimport { getToken } from '../utils/token'\r\nimport { backendLink } from '../utils/links'\r\nimport { ProjectView } from '../components/ProjectView'\r\nimport { LoadingElement } from \"../utils/LoadingElement\";\r\n\r\nexport function ProfileView() {\r\n  const params = useParams()\r\n\r\n  const res = useFetch(backendLink('profile', params.username), {\r\n    method:'GET',\r\n    headers: {\r\n      'Authorization': 'Token ' + getToken()\r\n    }\r\n  })\r\n\r\n  if (res.isLoading || !res.response) return <LoadingElement/>\r\n  if (res.response.errors) return <Heading>{res.response.errors.error}</Heading>\r\n\r\n  return (\r\n    <Flex h=\"100%\" direction={{ base: 'column', md: 'row', lg: 'row' }}>\r\n      <UserCard\r\n        py={5}\r\n        px={10}\r\n        maxW={{ md: '382px' }}\r\n        minW={{md:'344px'}}\r\n        w={{ base: '100%', md: '50%', lg: '35%' }}\r\n        height='full'\r\n        display={{ base: 'flex', md: 'block', lg: 'block' }}\r\n        userData={res.response.data}\r\n        align='center'\r\n      />\r\n      <Container\r\n        mt='1%'\r\n        width='100%'\r\n        height='100vh'\r\n        projects = {res.response.data.projects}\r\n        params={params}\r\n      />\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst UserCard = ({userData, ...props }) => {\r\n  const firstName = userData.first_name\r\n  const lastName = userData.last_name\r\n  const username = userData.username\r\n  const avatarUrl = userData.avatar_url\r\n\r\n  return (\r\n    <Box {...props}>\r\n      <Box my={5}>\r\n        <Avatar\r\n          src={avatarUrl}\r\n          size={{base:'xs', md:'3xl'}} >\r\n        </Avatar>\r\n      </Box>\r\n      <Box\r\n        width='full'\r\n        ml={{base:10, md:0}}\r\n      >\r\n        <Heading\r\n          align='left'\r\n          size={'md'}\r\n        >{firstName} {lastName}</Heading>\r\n        <Text fontSize={{base: 'md', lg: 'xl'}}\r\n              fontWeight='thin'\r\n              color='gray'\r\n              align='left'\r\n        >{username}</Text>\r\n        <Button\r\n          mt={4}\r\n          width={{ base: 'max-content', md: 'full', lg: 'full' }}\r\n          variant='outline'\r\n        >\r\n          Cambiar datos\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nconst Container = ({projects, params, ...props}) => {\r\n  return (\r\n    <Box {...props}>\r\n      <Tabs\r\n        colorScheme='cyan'\r\n      >\r\n        <TabList>\r\n          <Tab id={'projects'}>Proyectos</Tab>\r\n          <Tab id={'information'}>Información</Tab>\r\n        </TabList>\r\n\r\n        <TabPanels>\r\n          <TabPanel>\r\n\r\n            {!params.project ? <Projects projects={projects}/> : <ProjectView projects={projects}/>}\r\n\r\n          </TabPanel>\r\n          <TabPanel>\r\n            <p>Esta es la pestaña de información</p>\r\n          </TabPanel>\r\n        </TabPanels>\r\n      </Tabs>\r\n    </Box>\r\n  )\r\n}\r\n\r\nfunction Projects({projects, ...props}) {\r\n  return(\r\n    <>\r\n      <Stack\r\n        isInline\r\n        p={3}\r\n      >\r\n        <DrawerAddProject/>\r\n      </Stack>\r\n      <Box\r\n        borderWidth={1}\r\n        borderRadius={10}\r\n        p={5}\r\n      >\r\n        <Stack\r\n          divider={<StackDivider borderColor=\"gray.200\" />}\r\n        >\r\n          {projects.map((project, index)=> {\r\n            const lastUpdate = formatDate(project.updated_at)\r\n\r\n            return (\r\n              <Flex\r\n                key={project.id}\r\n                height={12}\r\n                width={'full'}\r\n                mb={5}\r\n              >\r\n                <Stack>\r\n                  <Stack isInline>\r\n                            <Heading fontSize=\"xl\">\r\n                                <Link to={`${index+1}`} >{project.name}</Link>\r\n                            </Heading>\r\n                    <Tag colorScheme={project.status ? 'green' : 'red'} ml={1}>\r\n                      {project.status ? 'Abierto' : 'Cerrado'}\r\n                    </Tag>\r\n                  </Stack>\r\n                  <Text fontSize=\"sm\">Ultima actualización {lastUpdate}</Text>\r\n                </Stack>\r\n              </Flex>\r\n            )\r\n          })}\r\n        </Stack>\r\n      </Box>\r\n    </>\r\n  )\r\n}","import {\r\n    Flex, Box, Text,\r\n    Heading, Link, FormControl,\r\n    FormLabel, Input, Stack,\r\n    Checkbox, Button\r\n} from \"@chakra-ui/react\"\r\nimport { useState } from 'react'\r\nimport { useFetch } from \"../hooks/useFetch\"\r\nimport { backendLink } from \"../utils/links\"\r\nimport { setToken } from '../utils/token'\r\n\r\nexport function LoginView() {\r\n    \r\n    return (\r\n        <LoginArea/>  \r\n    )\r\n}\r\n\r\nconst LoginArea = () => {\r\n    return (\r\n        <Flex minHeight='100vh' width='full' align='center' justifyContent='center'>\r\n            <Box\r\n                borderWidth={1}\r\n                px={4}\r\n                width='full'\r\n                maxWidth='450px'\r\n                borderRadius={10}\r\n                textAlign='center'\r\n                boxShadow='lg'\r\n            >\r\n                <Box my={8}>\r\n                    <Heading>Sign In to Your Account</Heading>\r\n                    <Text>\r\n                        Or <Link>register</Link>\r\n                    </Text>\r\n                </Box>\r\n                <Box>\r\n                    <LoginForm/>\r\n                </Box>\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nconst LoginForm = () => {\r\n    const [email, setEmail] = useState(null)\r\n    const [password, setPassword] = useState(null)\r\n    const [fetchStatus, setFetchStatus] = useState(false)\r\n\r\n    const SignIn = (event) => {\r\n        event.preventDefault()\r\n        fetch(backendLink('login'), {\r\n                method: 'POST',\r\n                headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                body: JSON.stringify({\r\n                    'username': email,\r\n                    password\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setToken(data.token)\r\n            })\r\n        //TODO make a page with this hook to redirect\r\n        // const res = useFetch(backendLink('login'), {\r\n        //     method: 'POST',\r\n        //     headers: {\r\n        //         'Content-Type': 'application/json',\r\n        //     },\r\n        //     body: JSON.stringify({\r\n        //         'username': email,\r\n        //         password\r\n        //     })\r\n        // })\r\n        // console.log(res)\r\n        // setFetchStatus(res.isLoading ? true : false)\r\n\r\n    }\r\n\r\n    return (\r\n        <Box my ={4} textAlign='left'>\r\n            <form>\r\n                <FormControl isRequired>\r\n                    <FormLabel>Email Address</FormLabel>\r\n                    <Input\r\n                        type='email'\r\n                        placeholder='Enter your email address'\r\n                        onChange={event => setEmail(event.currentTarget.value)}\r\n                    ></Input>\r\n                </FormControl>\r\n                <FormControl isRequired>\r\n                    <FormLabel>Password</FormLabel>\r\n                    <Input\r\n                        type='password'\r\n                        placeholder='Enter your password'\r\n                        onChange={event => setPassword(event.currentTarget.value)}\r\n                        onKeyUp={event => event.keyCode === 13 ? SignIn : 0}\r\n                    ></Input>\r\n                </FormControl>\r\n\r\n                <Stack isInline justifyContent='space-between' mt={4}>\r\n                    <Box>\r\n                        <Checkbox>Remember me</Checkbox>\r\n                    </Box>\r\n                    <Box>\r\n                        <Link>Forgot your password?</Link>\r\n                    </Box>\r\n                </Stack>\r\n\r\n                <Button\r\n                    isLoading={fetchStatus}\r\n                    loadingText='Iniciando Sesión'\r\n                    width='full'\r\n                    mt={4}\r\n                    onClick={SignIn}>Sign in</Button>\r\n            </form>\r\n        </Box>\r\n    )\r\n}","import { ProfileView } from '../views/Profile'\r\nimport { LoginView } from '../views/login'\r\nimport { NotfoundPage } from '../views/NotfoundPage'\r\n\r\nexport const routes = {\r\n  login: {path: '/login/', component: LoginView},\r\n  profile: { path: '/profile/:username/', component: ProfileView },\r\n  profileTab: { path: '/profile/:username/:project/', component: ProfileView },\r\n\r\n  notFound: { path:'/404/', component: NotfoundPage}\r\n}","import React from 'react'\r\n\r\nexport const NotfoundPage = () => {\r\n    return (\r\n        <div>\r\n            <h1>404</h1>\r\n            <h2>Not found</h2>\r\n        </div>\r\n    )\r\n}","import { Box } from '@chakra-ui/layout';\r\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\r\nimport { routes } from './routes';\r\n\r\nexport function AppRouter() {\r\n  return (\r\n    <Box d=\"flex\" flexDirection=\"column\" minH=\"100vh\">\r\n      <Router>\r\n        <Box h='100%' d='flex' flexGrow={1} flexDirection='column'>\r\n          <Switch>\r\n            <Route exact path={routes.login.path} component={routes.login.component} />\r\n            <Route exact path={routes.profileTab.path} component={routes.profileTab.component}/>\r\n            <Route exact strict path={routes.profile.path} component={routes.profile.component}/>\r\n            <Route exact path={routes.notFound.path} component={routes.notFound.component} />\r\n            <Redirect to={routes.notFound.path}/>\r\n          </Switch>\r\n        </Box>\r\n      </Router>\r\n    </Box>\r\n  );\r\n}\r\n","import './App.css'\r\nimport { AppRouter } from './routes/AppRouter'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AppRouter></AppRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App/>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}