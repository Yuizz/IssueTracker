{"version":3,"sources":["hooks/useFetch.jsx","utils/links.jsx","utils/token.jsx","components/ErrorMessage.jsx","components/CheckElement.jsx","components/drawers.jsx","utils/formatDate.jsx","utils/labelColor.jsx","components/IssueDrawer.jsx","utils/issueStatus.jsx","utils/LoadingElement.jsx","components/ProjectView.jsx","views/Profile.jsx","views/login.jsx","routes/routes.jsx","views/NotfoundPage.jsx","routes/AppRouter.jsx","App.js","reportWebVitals.js","index.js"],"names":["useFetch","url","options","useState","response","setResponse","error","setError","isLoading","setIsLoading","trigger","setTrigger","useEffect","a","fetch","res","json","fetchData","backendLink","endpoint","key","getToken","localStorage","getItem","ErrorMessage","message","my","status","borderRadius","CheckElement","list","setList","value","props","includes","isChecked","setIsChecked","copyList","push","filter","v","onClick","event","preventDefault","backgroundColor","textColor","width","height","children","DrawerAddProject","useDisclosure","isOpen","onOpen","onClose","isFetching","firstField","React","useRef","username","useParams","name","setName","colorScheme","placement","initialFocusRef","borderBottomWidth","spacing","htmlFor","ref","id","placeholder","onChange","currentTarget","borderTopWidth","variant","mr","method","body","JSON","stringify","users","headers","then","console","log","DrawerAddIssue","projectId","title","setTitle","desc","setDesc","labelId","setLabelId","assignees","setAssignees","labels","data","handleClose","success","toast","createStandaloneToast","duration","isClosable","onSubmit","e","length","isRequired","onBlur","target","resize","size","map","label","isInline","justifyContent","divider","borderColor","user","py","px","src","avatar_url","fontSize","first_name","last_name","type","form","loadingText","formatDate","d","date","Date","Intl","DateTimeFormat","month","day","format","labelColor","bug","enhancement","IssueDrawer","issue","setIssue","mt","project_name","author","created_at","description","assignee","issueStatus","color","icon","InfoOutlineIcon","CheckIcon","LinkIcon","LoadingElement","isIndeterminate","ProjectView","projects","project","errors","p","borderWidth","issues","issueCard","lastUpdate","updated_at","hasArrow","as","ProfileView","params","h","direction","base","md","lg","maxW","minW","w","display","userData","align","UserCard","firstName","lastName","avatarUrl","ml","fontWeight","Container","Projects","index","mb","to","LoginArea","minHeight","maxWidth","textAlign","boxShadow","LoginForm","email","setEmail","password","setPassword","fetchStatus","SignIn","token","setItem","catch","err","onKeyUp","keyCode","routes","login","path","component","profile","profileTab","notFound","AppRouter","flexDirection","minH","flexGrow","exact","strict","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.899264a3.chunk.js","sourcesContent":["import {useState, useEffect} from 'react'\n\nexport function useFetch(url, options) {\n    const  [response, setResponse] = useState(null)\n    const  [error, setError] = useState(null)\n    const  [isLoading, setIsLoading] = useState(false)\n    const [trigger, setTrigger] = useState(false)\n\n    useEffect(() => {\n        setTrigger(false)\n\n        const fetchData = async () => {\n            if(!response)  setIsLoading(true)\n            try {\n                const res = await fetch(url, options)\n                const json = await res.json()\n                setResponse(json)\n                setIsLoading(false)\n            } catch (error) {\n                setError(error)\n            }\n        }\n        fetchData()\n    }, [trigger])\n    return { response, error, isLoading, setTrigger }\n}","\nexport function backendLink(endpoint='', key=null) {\n    if (process.env.NODE_ENV !== 'production') {\n        return `http://localhost:8000/api/v1/${endpoint}${key ? '/'+key : ''}/`\n    }\n    return `/api/v1/${endpoint}${key ? '/'+key : ''}/`\n    // return \"http://localhost:8000/\" + endpoint + key ? \"/\" : '' + key\n}\n","export const getToken = () => {\n    return localStorage.getItem('issue_tracker_token')\n}\n\nexport const setToken = (token) => {\n    return localStorage.setItem('issue_tracker_token', token)\n}","import React from 'react'\nimport { Box, Alert, AlertDescription, AlertIcon} from \"@chakra-ui/react\";\n\nexport default function ErrorMessage({message}){\n  return(\n    <Box my={4}>\n      <Alert status={'error'} borderRadius={10}>\n        <AlertIcon/>\n        <AlertDescription>{message}</AlertDescription>\n      </Alert>\n    </Box>\n  )\n}","import { Box } from \"@chakra-ui/react\";\nimport {useState, useEffect} from \"react\";\n\nexport function CheckElement({list, setList, value, ...props}){\n  const [isChecked, setIsChecked] = useState(list.includes(value))\n\n  useEffect(()=>{\n    if(isChecked){\n      let copyList = list\n      copyList.push(value)\n      setList(copyList)\n    }\n    if(!isChecked){\n      const copyList = list.filter((v) => v !== value)\n      setList(copyList)\n    }\n  },[isChecked])\n\n  const handleClick = (event) => {\n    event.preventDefault()\n    setIsChecked(!isChecked)\n  }\n\n  return(\n    <Box\n        onClick={handleClick}\n         borderRadius={0}\n         backgroundColor={isChecked ? 'blue.500' : ''}\n         textColor={isChecked ? 'white' : ''}\n         width={'full'}\n         height={'max-content'}\n      {...props}>\n      {props.children}\n    </Box>\n  )\n}","import React from 'react'\nimport {\n  Drawer, DrawerBody, DrawerFooter,\n  DrawerHeader, DrawerOverlay, DrawerContent, DrawerCloseButton,\n  Button, useDisclosure, Input,\n  Box, FormLabel, Stack,\n  Select, Textarea, FormControl,\n  VStack, Avatar, Text, Heading, StackDivider, createStandaloneToast,\n} from \"@chakra-ui/react\"\nimport { useState } from \"react\"\nimport { useParams } from 'react-router'\nimport { useHistory } from 'react-router-dom'\nimport { useFetch } from '../hooks/useFetch'\nimport { backendLink } from '../utils/links'\nimport { getToken } from '../utils/token'\nimport ErrorMessage from \"./ErrorMessage\"\nimport { CheckElement } from \"./CheckElement\"\nimport {CheckCircleIcon} from \"@chakra-ui/icons\";\n\nexport function DrawerAddProject(){\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [isFetching, setIsFetching] = useState(false)\n  const firstField = React.useRef()\n  const username = useParams()\n\n  const [name, setName] = useState('')\n\n  const PublishProject = () => {\n\n    fetch(backendLink('projects'), {\n      method: 'POST',\n      body: JSON.stringify({\n        name: name,\n        users: [username],\n        status: true,\n      }),\n      headers: {\n        'Authorization': 'Token ' + getToken(),\n        'Content-Type': 'application/json',\n      }\n    }).then(response => {\n      response.status === 201 ? onClose() : console.log('error')\n    })\n\n  }\n\n  return (\n    <>\n      <Button\n        colorScheme=\"green\"\n        onClick={onOpen}\n      >\n        Nuevo Proyecto\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        initialFocusRef={firstField}\n        onClose={onClose}\n      >\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerCloseButton />\n            <DrawerHeader borderBottomWidth=\"1px\">\n              Crear nuevo proyecto\n            </DrawerHeader>\n\n            <DrawerBody>\n              <Stack spacing=\"24px\">\n                <Box>\n                  <FormLabel htmlFor=\"name\">Nombre del proyecto</FormLabel>\n                  <Input\n                    ref={firstField}\n                    id=\"name\"\n                    placeholder=\"Introduce el nombre del proyecto\"\n                    onChange={event => setName(event.currentTarget.value)}\n                  />\n                </Box>\n              </Stack>\n            </DrawerBody>\n\n            <DrawerFooter borderTopWidth=\"1px\">\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\n                Cancelar\n              </Button>\n              <Button\n                colorScheme='teal'\n                onClick={PublishProject}\n                isLoading={isFetching}\n              >Crear</Button>\n            </DrawerFooter>\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  )\n}\n\n\n\nexport function DrawerAddIssue({projectId, trigger, ...props}){\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const firstField = React.useRef()\n\n  const [title, setTitle] = useState('')\n  const [desc, setDesc] = useState('')\n  const [labelId, setLabelId] = useState(null)\n  const [assignees, setAssignees] = useState([])\n\n  const [error, setError] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n\n  const res = useFetch(backendLink('newissuedata', '1'), {\n    method:'GET',\n    headers: {\n      'Authorization': 'Token ' + getToken()\n    }\n  })\n\n  let labels = res.isLoading || !res.response ? [] : res.response.data.labels\n  let users = res.isLoading || !res.response ? [] : res.response.data.users\n\n  function handleClose(success=false){\n    onClose()\n    setError('')\n    setIsLoading(false)\n    setAssignees([])\n    setLabelId(null)\n\n    if(success===true){\n      trigger(true)\n\n      const toast = createStandaloneToast()\n      toast({\n        title: 'Issue creado.',\n        status:'success',\n        duration:6000,\n        isClosable:true,\n      })\n    }\n  }\n\n  function handleSubmit(e){\n    e.preventDefault()\n    setIsLoading(true)\n    setError('')\n\n    if (title.length > 50){\n      setError('The title characters must be less than 50.')\n      return 0\n    }\n\n    fetch(backendLink('issues'), {\n      method:'POST',\n      body:JSON.stringify({\n        'title':title,\n        'label_id':labelId ? labelId : null,\n        'description':desc,\n        'project':projectId,\n        'assignees': assignees\n      }),\n      headers: {\n        'Authorization': 'Token ' + getToken(),\n        'Content-Type': 'application/json',\n      }\n    }).then(response=>{\n      response.status === 201 ? handleClose(true) : setError('Error al crear el issue. Trata de nuevo.')\n    })\n  }\n\n  return (\n    <>\n      <Button\n        colorScheme=\"green\"\n        onClick={onOpen}\n        {...props}\n      >\n        Nuevo Issue\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        initialFocusRef={firstField}\n        onClose={handleClose}\n      >\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerCloseButton />\n            <DrawerHeader borderBottomWidth=\"1px\">\n              Crear nuevo issue\n            </DrawerHeader>\n\n            <DrawerBody>\n              <form id={'issue-form'}\n                    onSubmit={handleSubmit}\n              >\n                {error && <ErrorMessage message={error}/>}\n\n              <Stack spacing={'20px'}>\n\n                <FormControl id={'title'} isRequired>\n                  <FormLabel>Título del issue</FormLabel>\n                  <Input ref={firstField}\n                         onBlur={event => setTitle(event.target.value)}\n                         placeholder={'Introduce el título del issue'}\n                  />\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"desc\">Descripción</FormLabel>\n                  <Textarea placeholder={'Escribe la descripción del issue'}\n                            onBlur={event => setDesc(event.target.value)}\n                            resize={'none'}\n                            size={'sm'}\n                            height={'20vh'}\n                            id={'desc'} />\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel>Etiqueta</FormLabel>\n                  <Select onChange={event=>setLabelId(event.target.value)}\n                          placeholder={'Selecciona una etiqueta'}>\n                    {labels.map(label => {\n                      return(\n                        <option key={label.id} value={label.id}>\n                            {label.name}\n                        </option>\n                      )\n                    })}\n                  </Select>\n                </FormControl>\n\n                <FormControl>\n                  <Stack isInline justifyContent={'space-between'}>\n                    <FormLabel>Asignar usuarios</FormLabel>\n                  </Stack>\n                  <VStack spacing={0} divider={<StackDivider borderColor=\"gray.200\" />}>\n                    {users.map(user=>{\n                      return(\n                        <CheckElement key={user.id}\n                                      value={user.id}\n                                      list={assignees}\n                                      setList={setAssignees}\n                                      py={.5}\n                                      px={5}\n                        >\n                          <Stack isInline>\n                            <Avatar size={'xs'} src={user.avatar_url}/>\n                            <Heading fontSize={'sm'}>{user.username}</Heading>\n                            <Text fontSize={'xs'}>{user.first_name} {user.last_name}</Text>\n                         </Stack>\n                        </CheckElement>\n                      )\n                    })}\n                  </VStack>\n                </FormControl>\n\n\n              </Stack>\n              </form>\n            </DrawerBody>\n\n            <DrawerFooter borderTopWidth=\"1px\">\n              <Button variant=\"outline\" mr={3} onClick={handleClose}>\n                Cancelar\n              </Button>\n              <Button\n                type={'submit'}\n                form={'issue-form'}\n                isLoading={isLoading}\n                loadingText={'Fetching...'}\n                // onClick={Test}\n                colorScheme=\"blue\">Crear</Button>\n            </DrawerFooter>\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  )\n}","export function formatDate(d) {\n    const date = new Date(d);\n    const formattedDate = Intl.DateTimeFormat('es-MX',{\n        // year: 'numeric',\n        month: 'short',\n        day: '2-digit' }).format(date);\n\n    return formattedDate\n}\n\n// Output in M d, Y format","export const labelColor = {\n  bug:'red',\n  enhancement: 'teal',\n}\n\n","import {\n  Avatar, createStandaloneToast,\n  Drawer, DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n  Heading,\n  Link, Stack, StackDivider, Tag, Text,\n  useDisclosure,\n} from \"@chakra-ui/react\"\nimport {useState} from \"react\"\nimport {getToken} from \"../utils/token\";\nimport {formatDate} from \"../utils/formatDate\";\nimport {labelColor} from \"../utils/labelColor\";\n\nexport function IssueDrawer({trigger, ...props}){\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [ issue, setIssue ] = useState({})\n\n  const handleOpen = () => {\n    onOpen()\n\n    fetch(props.issue.url, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Token ' + getToken(),\n      }\n    }).then(response => {\n      response.json().then(data=>{\n        setIssue(data.data ? data.data : {})\n      })\n\n      if (response.status === 404){\n        onClose()\n        const toast = createStandaloneToast()\n        toast({\n        title: 'El issue no existe.',\n        status:'error',\n        duration:6000,\n        isClosable:true,\n          })\n        trigger(true)\n      }\n    })\n  }\n\n  return(\n    <>\n      <Heading fontSize={'sm'}>\n        <Link onClick={handleOpen}>{props.issue.title}</Link>\n      </Heading>\n\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        onClose={onClose}\n      >\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerCloseButton/>\n            <DrawerHeader mt={5}>\n              <Heading size={'md'}>{issue.title ? issue.title : 'Titulo del issue'}</Heading>\n              <Text fontSize={'xs'} textColor={'gray.500'} mt={1}>Abierto en {issue.project_name}</Text>\n            </DrawerHeader>\n\n            <DrawerBody>\n              <Stack divider={<StackDivider borderColor=\"gray.300\" />}>\n                <Stack>\n                  <Stack isInline>\n                    <Avatar size={'sm'} src={issue.author ? issue.author.avatar_url : ''}/>\n                    <Stack>\n                      <Heading size={'xs'}>{issue.author ? issue.author.username : 'Autor del issue'}</Heading>\n                      <Text fontSize={'xs'}>{issue.created_at ? formatDate(issue.created_at) : ''}</Text>\n                    </Stack>\n                  </Stack>\n                  <Text fontSize={'xs'}>\n                    {issue.description}\n                  </Text>\n                </Stack>\n\n                <Stack>\n                  <Text fontSize={'xs'} textColor={'gray.500'}>Usuarios asignados</Text>\n\n                  {issue.assignees ? issue.assignees.map(assignee => {\n                    return (\n                      <Stack isInline key={assignee.id}>\n                        <Avatar size={'xs'} src={assignee.avatar_url}/>\n                        <Text fontSize={'xs'}>{assignee.username}</Text>\n                      </Stack>\n                    )\n                  }) : ''}\n\n                </Stack>\n\n                <Stack>\n                  <Text fontSize={'xs'} textColor={'gray.500'}>Etiqueta</Text>{\n                    issue.label ?\n                      <Tag colorScheme={labelColor[issue.label.name]} size={'sm'}>{issue.label.name}</Tag>\n                      : ''}\n                </Stack>\n              </Stack>\n            </DrawerBody>\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  )\n}","import { LinkIcon, CheckIcon, InfoOutlineIcon }\n  from '@chakra-ui/icons'\n\nexport const issueStatus = [\n  {\n    name: 'Open',\n    color: 'green',\n    icon: InfoOutlineIcon\n  },\n  {\n    name: 'Closed',\n    color: 'red',\n    icon: CheckIcon\n  },\n  {\n    name:'Merged',\n    color:'purple',\n    icon: LinkIcon\n  }\n]\n\n// OPEN = 1, 'Open'\n// CLOSED = 2, 'Closed'\n// MERGED = 3, 'Merged'","import {Center, CircularProgress} from \"@chakra-ui/react\";\n\nexport function LoadingElement(){\n\n  return(\n    <Center height={'100vh'}>\n      <CircularProgress isIndeterminate color=\"blue.300\" />\n    </Center>\n  )\n}","import {\n  Box, Center, Flex,\n  Heading, Spinner, Stack, StackDivider,\n  Tag, Text, Tooltip\n} from \"@chakra-ui/react\";\nimport { useParams } from 'react-router'\nimport {formatDate} from \"../utils/formatDate\";\nimport {IssueDrawer} from \"./IssueDrawer\";\nimport {labelColor} from \"../utils/labelColor\";\nimport {DrawerAddIssue} from \"./drawers\";\nimport {issueStatus} from \"../utils/issueStatus\";\nimport {Icon} from \"@chakra-ui/icons\";\nimport {useFetch} from \"../hooks/useFetch\";\nimport {getToken} from \"../utils/token\";\nimport {LoadingElement} from \"../utils/LoadingElement\";\n\nexport function ProjectView({projects, ...props}){\n  const params = useParams()\n\n  const query = projects[params.project-1].url\n\n  const res = useFetch(query, {\n    method:'GET',\n    headers: {\n      'Authorization': 'Token ' + getToken()\n    }\n  })\n\n  if (res.isLoading || !res.response) return <LoadingElement/>\n  if (res.response.errors) return <Heading>{res.response.errors.error}</Heading>\n\n  const project = res.response.data\n  return(\n    <Box\n      width={'full'}\n      height={'full'}\n    >\n      <Stack isInline p={3} justifyContent={'space-between'}>\n        <Heading>{project ? project.name : ''}</Heading>\n        <DrawerAddIssue  projectId={project ? project.id : ''} trigger={res.setTrigger}/>\n      </Stack>\n      <Box\n        borderWidth={1}\n        borderRadius={10}\n        p={5}\n      >\n        <Stack\n          divider={<StackDivider borderColor=\"gray.200\" />}\n        >\n          {project ? project.issues.map(issue=>issueCard(issue, res.setTrigger)) : ''}\n        </Stack>\n      </Box>\n    </Box>\n  )\n}\n\nconst issueCard = (issue, trigger) => {\n  const lastUpdate = formatDate(issue.updated_at)\n  const status = issueStatus[issue.status-1]\n\n  return(\n    <Flex\n      key={issue.id}\n      height={'auto'}\n      width={'full'}\n    >\n      <Stack isInline>\n        <Stack>\n          <Stack isInline>\n            <Tooltip hasArrow label={status.name} placement={'left'}>\n                <Icon as={status.icon} color={status.color}/>\n            </Tooltip>\n              {issue.label ? issue.label.name : ''}\n            <Stack>\n              <IssueDrawer issue={issue} trigger={trigger}/>\n              <Tag\n                colorScheme={issue.label ? labelColor[issue.label.name] : ''}\n                borderRadius={20}\n                width={'max-content'}\n              >{issue.label ? issue.label.name : ''}</Tag>\n            </Stack>\n          </Stack>\n          <Text fontSize={'xs'} textColor={'gray.500'}>Ultima actualización {lastUpdate}</Text>\n        </Stack>\n      </Stack>\n    </Flex>\n  )\n}","import {\n  Flex, Box, Text, Heading,\n  Stack, Button,\n  Avatar, Tabs, TabList, Tab, TabPanels,\n  TabPanel, Tag, StackDivider,\n} from '@chakra-ui/react'\nimport { useParams } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport { DrawerAddProject } from '../components/drawers'\nimport { useFetch } from '../hooks/useFetch'\nimport { formatDate } from '../utils/formatDate'\nimport { getToken } from '../utils/token'\nimport { backendLink } from '../utils/links'\nimport { ProjectView } from '../components/ProjectView'\nimport { LoadingElement } from \"../utils/LoadingElement\";\n\nexport function ProfileView() {\n  const params = useParams()\n\n  const res = useFetch(backendLink('profile', params.username), {\n    method:'GET',\n    headers: {\n      'Authorization': 'Token ' + getToken()\n    }\n  })\n\n  if (res.isLoading || !res.response) return <LoadingElement/>\n  if (res.response.errors) return <Heading>{res.response.errors.error}</Heading>\n\n  return (\n    <Flex h=\"100%\" direction={{ base: 'column', md: 'row', lg: 'row' }}>\n      <UserCard\n        py={5}\n        px={10}\n        maxW={{ md: '382px' }}\n        minW={{md:'344px'}}\n        w={{ base: '100%', md: '50%', lg: '35%' }}\n        height='full'\n        display={{ base: 'flex', md: 'block', lg: 'block' }}\n        userData={res.response.data}\n        align='center'\n      />\n      <Container\n        mt='1%'\n        width='100%'\n        height='100vh'\n        projects = {res.response.data.projects}\n        params={params}\n      />\n    </Flex>\n  )\n}\n\nconst UserCard = ({userData, ...props }) => {\n  const firstName = userData.first_name\n  const lastName = userData.last_name\n  const username = userData.username\n  const avatarUrl = userData.avatar_url\n\n  return (\n    <Box {...props}>\n      <Box my={5}>\n        <Avatar\n          src={avatarUrl}\n          size={{base:'xs', md:'3xl'}} >\n        </Avatar>\n      </Box>\n      <Box\n        width='full'\n        ml={{base:10, md:0}}\n      >\n        <Heading\n          align='left'\n          size={'md'}\n        >{firstName} {lastName}</Heading>\n        <Text fontSize={{base: 'md', lg: 'xl'}}\n              fontWeight='thin'\n              color='gray'\n              align='left'\n        >{username}</Text>\n        <Button\n          mt={4}\n          width={{ base: 'max-content', md: 'full', lg: 'full' }}\n          variant='outline'\n        >\n          Cambiar datos\n        </Button>\n      </Box>\n    </Box>\n  )\n}\n\nconst Container = ({projects, params, ...props}) => {\n  return (\n    <Box {...props}>\n      <Tabs\n        colorScheme='cyan'\n      >\n        <TabList>\n          <Tab id={'projects'}>Proyectos</Tab>\n          <Tab id={'information'}>Información</Tab>\n        </TabList>\n\n        <TabPanels>\n          <TabPanel>\n\n            {!params.project ? <Projects projects={projects}/> : <ProjectView projects={projects}/>}\n\n          </TabPanel>\n          <TabPanel>\n            <p>Esta es la pestaña de información</p>\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </Box>\n  )\n}\n\nfunction Projects({projects, ...props}) {\n  return(\n    <>\n      <Stack\n        isInline\n        p={3}\n      >\n        <DrawerAddProject/>\n      </Stack>\n      <Box\n        borderWidth={1}\n        borderRadius={10}\n        p={5}\n      >\n        <Stack\n          divider={<StackDivider borderColor=\"gray.200\" />}\n        >\n          {projects.map((project, index)=> {\n            const lastUpdate = formatDate(project.updated_at)\n\n            return (\n              <Flex\n                key={project.id}\n                height={12}\n                width={'full'}\n                mb={5}\n              >\n                <Stack>\n                  <Stack isInline>\n                            <Heading fontSize=\"xl\">\n                                <Link to={`${index+1}`} >{project.name}</Link>\n                            </Heading>\n                    <Tag colorScheme={project.status ? 'green' : 'red'} ml={1}>\n                      {project.status ? 'Abierto' : 'Cerrado'}\n                    </Tag>\n                  </Stack>\n                  <Text fontSize=\"sm\">Ultima actualización {lastUpdate}</Text>\n                </Stack>\n              </Flex>\n            )\n          })}\n        </Stack>\n      </Box>\n    </>\n  )\n}","import {\n    Flex, Box, Text,\n    Heading, Link, FormControl,\n    FormLabel, Input, Stack,\n    Checkbox, Button\n} from \"@chakra-ui/react\"\nimport { useState } from 'react'\nimport { useFetch } from \"../hooks/useFetch\"\nimport { backendLink } from \"../utils/links\"\nimport { setToken } from '../utils/token'\n\nexport function LoginView() {\n    \n    return (\n        <LoginArea/>  \n    )\n}\n\nconst LoginArea = () => {\n    return (\n        <Flex minHeight='100vh' width='full' align='center' justifyContent='center'>\n            <Box\n                borderWidth={1}\n                px={4}\n                width='full'\n                maxWidth='450px'\n                borderRadius={10}\n                textAlign='center'\n                boxShadow='lg'\n            >\n                <Box my={8}>\n                    <Heading>Sign In to Your Account</Heading>\n                    <Text>\n                        Or <Link>register</Link>\n                    </Text>\n                </Box>\n                <Box>\n                    <LoginForm/>\n                </Box>\n            </Box>\n        </Flex>\n    )\n}\n\nconst LoginForm = () => {\n    const [email, setEmail] = useState(null)\n    const [password, setPassword] = useState(null)\n    const [fetchStatus, setFetchStatus] = useState(false)\n\n    const SignIn = (event) => {\n        event.preventDefault()\n        console.log(backendLink('login'))\n        fetch(backendLink('login'), {\n                method: 'POST',\n                headers: {\n                        'Content-Type': 'application/json',\n                    },\n                body: JSON.stringify({\n                    'username': email,\n                    password\n            })\n        })\n            .then(response => response.json())\n            .then(data => {\n                console.log(data)\n                setToken(data.token)\n            }).catch(err => {\n                console.log(err)\n        })\n        //TODO make a page with this hook to redirect\n        // const res = useFetch(backendLink('login'), {\n        //     method: 'POST',\n        //     headers: {\n        //         'Content-Type': 'application/json',\n        //     },\n        //     body: JSON.stringify({\n        //         'username': email,\n        //         password\n        //     })\n        // })\n        // console.log(res)\n        // setFetchStatus(res.isLoading ? true : false)\n\n    }\n\n    return (\n        <Box my ={4} textAlign='left'>\n            <form>\n                <FormControl isRequired>\n                    <FormLabel>Email Address</FormLabel>\n                    <Input\n                        type='email'\n                        placeholder='Enter your email address'\n                        onChange={event => setEmail(event.currentTarget.value)}\n                    ></Input>\n                </FormControl>\n                <FormControl isRequired>\n                    <FormLabel>Password</FormLabel>\n                    <Input\n                        type='password'\n                        placeholder='Enter your password'\n                        onChange={event => setPassword(event.currentTarget.value)}\n                        onKeyUp={event => event.keyCode === 13 ? SignIn : 0}\n                    ></Input>\n                </FormControl>\n\n                <Stack isInline justifyContent='space-between' mt={4}>\n                    <Box>\n                        <Checkbox>Remember me</Checkbox>\n                    </Box>\n                    <Box>\n                        <Link>Forgot your password?</Link>\n                    </Box>\n                </Stack>\n\n                <Button\n                    isLoading={fetchStatus}\n                    loadingText='Iniciando Sesión'\n                    width='full'\n                    mt={4}\n                    onClick={SignIn}>Sign in</Button>\n            </form>\n        </Box>\n    )\n}\n","import { ProfileView } from '../views/Profile'\nimport { LoginView } from '../views/login'\nimport { NotfoundPage } from '../views/NotfoundPage'\n\nexport const routes = {\n  login: {path: '/login/', component: LoginView},\n  profile: { path: '/profile/:username/', component: ProfileView },\n  profileTab: { path: '/profile/:username/:project/', component: ProfileView },\n\n  notFound: { path:'/404/', component: NotfoundPage}\n}","import React from 'react'\n\nexport const NotfoundPage = () => {\n    return (\n        <div>\n            <h1>404</h1>\n            <h2>Not found</h2>\n        </div>\n    )\n}","import { Box } from '@chakra-ui/layout';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport { routes } from './routes';\n\nexport function AppRouter() {\n  return (\n    <Box d=\"flex\" flexDirection=\"column\" minH=\"100vh\">\n      <Router>\n        <Box h='100%' d='flex' flexGrow={1} flexDirection='column'>\n          <Switch>\n            <Route exact path={routes.login.path} component={routes.login.component} />\n            <Route exact path={routes.profileTab.path} component={routes.profileTab.component}/>\n            <Route exact strict path={routes.profile.path} component={routes.profile.component}/>\n            <Route exact path={routes.notFound.path} component={routes.notFound.component} />\n            <Redirect to={routes.notFound.path}/>\n          </Switch>\n        </Box>\n      </Router>\n    </Box>\n  );\n}\n","import './App.css'\nimport { AppRouter } from './routes/AppRouter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppRouter></AppRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App/>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}